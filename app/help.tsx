import React from 'react';
import { Modal, Pressable, ScrollView, Dimensions, StyleSheet, Text, View, TouchableHighlight } from 'react-native';
import { useRouter, Stack, useLocalSearchParams  } from 'expo-router';
import { SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';
import { useState } from 'react';
import * as Application from 'expo-application';
import { iniObj } from './comFunc';
import { styles } from './index';
import { stylAppConf } from './configApp';

export default function help(){
  const router = useRouter();
  const [modalVisible, setModalVisible] = useState(false);

  return (
	<SafeAreaProvider>
		<SafeAreaView style={stylesHelp.container} edges={['top']}>
			<Stack.Screen options={{
				title: 'ヘルプ',
				headerTitleAlign: 'center',
				headerBackButtonDisplayMode:  'minimal' ,
				headerStyle: { backgroundColor: styles.containerBottom.backgroundColor },
				headerRight:  () => (
					<Pressable onPressIn={() => router.push('/about')}>
					<View style={[styles.headerButton, ]}>
						<Text style={{textAlign:'center' }}>About</Text>
					</View>
					</Pressable> ),         
				headerLeft:  () => ( 
					<Pressable onPressIn={() => router.back()}>
					<View style={[styles.headerButton,]}>
						<Text style={{textAlign:'center' }}>＜</Text>
					</View>
					</Pressable> ),               
			}} />
			<View  style={[stylesHelp.container, {height:300 }]}>
				<Text style={{ textAlign: 'center', fontSize:18}}>
					Version:{Application.nativeApplicationVersion}
					　Build:{Application.nativeBuildVersion}
					　Size:{Dimensions.get('window').width.toFixed(0)}
							x{Dimensions.get('window').height.toFixed(0)}
				</Text>
			<ScrollView >
						<Text style={stylesHelp.text}>
						{`
---------------------------------------------
基本画面
---------------------------------------------
発声ボタン（グレー）
押すとボタン定義によって（以下のいずれかの動作）
●	発声、発声＆遷移、遷移
	※遷移の有るボタンはボタンの縁が濃い

上部の（黄色）遷移ボタン
●	＜'<'＞：前画面があれば戻ります
●	＜設定＞：設定メニューに遷移します

下部の（黄色）遷移ボタン
●	＜'<'＞：前画面があれば戻ります
●	＜もう一度＞：ホームからの一連の発声を、もう一度再生し、発生内容を画面上に表示します。
	○	ホームから別の発声をすると以前の内容はクリアされます。
	○	約1秒の「長押し」でクリアできます。
	○	フリーテキストの発声が含まれるかは、設定のスイッチ(b)によります。
●	＜フリー＞：フリーテキスト画面に遷移します。（長押しで旧フリーテキストに遷移）
●	＜ホーム＞：ホーム画面に戻ります

画面を「左にスライド」すると次の画面へ移動することが出来ます。「右にスライド」すると前の画面に移動します。

---------------------------------------------
フリーテキスト（自由入力＆発声）画面
---------------------------------------------
●	上部の＜入力エリア＞に文字を入力し、＜発声＞ボタンを押すと発声します。
内容はボタンとして蓄積します（蓄積は重複しません）設定のスイッチ(a)によって、入力エリアは自動的にクリアされるか、そのままに成ります。
●	＜クリア＞ボタンを押すと入力エリアがクリアされます。（長押しで、全てのフリーボタンを消します。確認があります）
●	＜発音＞入力エリアの内容を発音します。

●  	下部のボタンを押すと、発音します
●	ボタンを長押しすると、そのボタンは削除されます
（フリーテキストから設定を呼び出すと、「旧フリーの取込」ボタンが有ります、これにより、旧フリーテキストの蓄積を取込めます

●	フリー画面から「設定」を呼び出すとフリーについての設定が出来ます
●	「旧フリーの取込」を押すと旧フリーテキストに蓄積されたデータが取込めます。
●	「フリー」画面の編集で内容の編集が出来ます、「オプション」で画面のオプションで row:8 col:2　などの指定でフリー画面のレイアウトが変えられます
変更後は「戻る」のあと「登録」を押して反映してください
●	タイトル「フリー」を変更すると、再起動後、通常の画面に成ります。（再起動後にフリーは新たに空のものが作られます）

---------------------------------------------
旧フリーテキスト（自由入力＆発声）画面
---------------------------------------------
●	上部の＜入力エリア＞に文字を入力し、＜発声＞ボタンを押すと発声します。
内容は蓄積されます。（蓄積は重複しません）設定のスイッチ(a)によって、入力エリアは自動的にクリアされるか、そのままに成ります。
●	＜もう一度＞：ホームからの一連の発声を、もう一度再生し、発生内容を画面上に表示します。
	○	約1秒の「長押し」でクリアできます。
	○	フリーテキストの発声が含まれるかは、設定のスイッチ(b)によります。
●	＜クリア＞ボタンを押すと入力エリアがクリアされます。
●	＜発音＞入力エリアの内容を発音します。

●	＜以前のテキストから選ぶ＞以前の入力から選択でき、その内容が＜入力エリア＞に入力されます。エリアで変更も出来ます。
●	＜除く＞ボタンはプルダウン選択後に＜除く＞を押すと蓄積から選択したものが削除されます。
●	＜空に＞は蓄積を空にします。

---------------------------------------------
設定メニュー
---------------------------------------------
●	＜定義を前に戻す＞ ボタンの定義をひとつ前に戻します。（長押し）
※実際に定義の変更をした場合に定義情報が保存され、現定義が前定義と成ります
●	＜定義を初期化する＞ ボタンの定義データ、設定などを、初期に戻します。（長押し）
※保存されているデータは削除されます。現在の定義を残したい場合は「クリップボードへコピー」して別のアプリで保存してください
●	＜再起動＞音が出ない等の問題が発生したら、アプリの再起動が出来ます（長押し）

●	＜クリップボードへ定義をコピー＞ボタンの定義データをクリップボードへコピーします、別のアプリで保存や編集してください。
「履歴を含む」を選ぶとデータに定義順、使用順、頻度順の情報を含みます
「基本のみ」とした場合はデータは定義順に出力されますが、定義順、履歴、頻度などの情報は含みません
●	＜クリップボードから定義を読込む＞ボタンの定義データをクリップボードから読込みます。別のアプリで定義データをコピーした後、この機能で読込みます。
※定義は画面ごとに上書きされます。（データにない画面はそのままです）

●	＜定義を保存/シェアする＞ボタンの定義データをスマホのシェア機能でシェアできます。\
シェアされたデータを、クリップボードへコピーし、次の読込み機能で読込んでください。
「履歴を含む」を選ぶとデータに定義順、使用順、頻度順の情報を含みます
「基本のみ」とした場合はデータは定義順に出力されますが、定義順、履歴、頻度などの情報は含みません
●	＜定義を読込む＞スマホのファイルのアクセス画面から、定義ファイルを選択して読込んでください。

●	＜画面を削除する＞現在の画面を削除します（長押し）
●	＜使用回数をリセット＞保存されているボタンの使用頻度の情報をリセットします（表示順の頻度順に影響します）
●	＜リンクされない画面をホームに登録する＞新たに追加された画面などで、どこからもリンクされていない画面が有る場合、ホームにリンクを登録します。

●	＜画面を編集する＞ボタン定義編集画面に遷移します

a.	「フリーテキストは発声後クリア」 ONでフリーテキスト画面で入力エリアが、発声後自動的にクリアされます。OFFの場合はそのまま残ります。
b.  「発声時に文字を表示する」ONにすると発声毎にその内容が表示されます。
c.  「文字を反転表示する」ONにすると、「もう一度」や発声毎表示の文字が上下反対に表示され、正面の相手が見やすくなります。
d.  「もう一度を閉じない」ONにすると、もう一度で表示された文字が、「閉じる」を押すまで、閉じません
e.  「音量変更」ONにすると、アプリの実行時にスライダーで設定された音量で発声されます。
f.  「この画面の表示順」は設定中の画面のボタンの表示順を設定できます。
	未設定：表示順は全体の設定に従います
	定義順：表示順は定義の順で固定です（画面編集のボタンの順序（オプション）の数字の昇順です）
	使用順：最後に使用したボタンが先頭に表示されます、以下最近に使用した順です
	頻度順：ボタンが押された回数の多い順に表示されます（回数は＜使用回数をリセット＞でリセットできます
g.  「全体の基本表示順」は全体の基本の表示順を設定します（各画面の表示順が未設定の場合はこの順序となります）
	未設定：定義順に表示されます、以外は画面の表示順と同じ意味です
---------------------------------------------
定義編集画面
---------------------------------------------
●	各入力エリアで定義が変更できます。「タイトル」は最初の画面のみで変更できます。
※タイトル「フリー」は使用できません
●	ボタンの内容は6件ずつ変更できます。
●	＜止める＞を押すと、その画面の変更内容は反映されず、変更メニューに戻ります。
●	＜続き、登録・次へ＞を押すと、変更内容が記録・反映されます。ボタン定義が更に有れば続きの編集画面が出てきます。
●	ボタンを削除するには、表示欄をクリア（すべての文字を削除）してください。
●	ボタンを追加するには、＜次へ＞を押してゆき、空欄がある画面まで遷移し、空欄に定義を追加してください。
●	欄が足する場合は、空欄を全て埋めて、＜次へ＞を押してください、追加の空欄の画面が表示されます。
（画面ごとのボタン数に上限は有りません）
●	「表示」：ボタンに表示される内容
●	「発音」：ボタンを押した場合に、テキストスピーチエンジンに送られる内容。発音が適切でない場合、ここにひらがなを入れるなど工夫してみてください。
全く異なる内容を入れることも可能です。空欄とした場合は表示の内容が読まれます。
Sound1不と入れると、警告音（チャラリン）、Sound2と入れると、クリック音（カチ）がします。
naと入れると音がしません。
●	「リンク」：ここに数字を入れると（発声し）その番号の画面に遷移します。
urlと入れると、ブラウザーに連携し「発声」に入れたURLを開きます。（発声はしません）

●	「オプション＞」を押す（あるいは左にスライド）と、編集中の画面と各ボタンのオプションの入力、変更画面が表示されます。
●	画面のオプションには col:ボタンの列数 sbh:ボタンの高さまたはrow:ボタンの行数、画面のボタンの並び順をsort:def|cnt|dat （定義順｜頻度順｜使用順）が指定できます
●	ボタンのオプションでは文字と、ボタンの色が「tc:white bc:#ffb3b3」の様に指定可能です。
●	入力が終わりましたら「＜」を押す（あるいは右にスライド）して戻ります。（変更した場合、戻った後登録が必要です）

---------------------------------------------
クリップボード・定義ファイルのデータについて
---------------------------------------------
●	定義データは行「// button2speak config data:」で始まっている必要が有ります。
    :の後ろに「R」を指定すると、既存のデータを削除してからロードします。「// button2speak config data:R」
	:の後ろにオプションが指定できます
	ボタンのデフォルトの色指定、色指定は色指定はCSS Color Module Level 3に準じます。（参考: https://www.w3.org/TR/css-color-3/#svg-color )
	例）#DCDCDC brack など16進数か色名での指定（複数指定する場合は半角スペースで区切ります）
	ボタンの色　dbc:色指定、ボタンの文字の色　dtc:色指定
	各画面のデフォルトのボタンの表示順を　sort:def|cnt|dat （定義順｜頻度順｜使用順）

●	画面の定義行は「>>,画面番号,画面のタイトル,画面オプション」です。番号は半角数字、文字には半角の「,」は使えません。
	「>>R,画面番号,画面のタイトル,画面オプション」とすると、画面単位で削除後ロードされます。（通常は同じボタン表示は上書きされ、それ以外は残ります、R場合ロードされたボタンだけに成ります）
●	画面オプションはcol:ボタンの列数(1から5) sbh:ボタンの高さ(標準は80)またはrow:ボタンの行数（高さを計算します）、この画面の表示順 sort:def|cnt|dat （定義順｜頻度順｜使用順）
	
●	画面の定義行につづいて、その画面のボタン定義です。（次の画面定義行まで）
●	各行は「表示,発声,リンク,オプション」です、「表示」以外は省略できます、文字には半角の「,」は使えません。（各項目の区切り文字です）
●	定義ファイルは画面単位のデータを利用できます、既存の画面は同じボタンは更新、新規では追加されます。（画面タイトルは常に置換です）
●	オプション定義は文字と、ボタンの色が指定可能です、指定がない場合はデフォルト色（上記dtc, dbcまたは文字は黒、ボタンはうすい灰色）です
	ボタンの文字の色　tc:色指定、ボタンの色　bc:色指定　

---------------------------------------------
※画面の追加方法　以下のいずれかを
---------------------------------------------
a)	どこかの画面のボタンのリンクに未使用の画面番号を入れてください。そしてこのボタンを押して、新画面へ遷移し、変更＞編集で新画面のボタンを設定してください。（画面数に上限は有りません）
b)	＜定義を読込＞を利用して、新しい画面定義を作成できます
例）15番の画面を追加（既存に15番画面が有ればタイトルは置換、ボタンはマージされます）
// button2speak config data:sort:def
>>,15,飲み物メニュー,col:3 row:5 sort:dat
エナジードリンク
紅茶
日本茶,,,bc:#7fff00 tc:black
コーヒー
．．．
※注意：この画面を呼び出すリンクをどこかの画面に設定してください。
c) 基本画面で「左にスライド」し次の画面を表示していき、空の画面までスライドすると、新画面が自動的に出来ますので、ここに定義してください。
d) フリーの画面から設定を呼び、画面の編集でタイトルを「フリー」以外に変更してください、その後、再起動すると、フリーのボタンは通常の画面と成ります
※フリーの画面は自動的に追加されます
`}
					</Text>
				</ScrollView>
			</View>
			</SafeAreaView>
			<SafeAreaView>
				<TouchableHighlight style={{alignItems:'center'}} onPress={ () => router.back() } >
					<View style={[stylesHelp.button, ]}>
						<Text style={[stylesHelp.text,{fontSize:18}]}>戻る</Text>
					</View>
				</TouchableHighlight>
			</SafeAreaView>
		</SafeAreaProvider>
	)
};

export const stylesHelp = StyleSheet.create({
  container: {
		flex: 1,
//		flexDirection: 'row', 	//これが有るとスクロールしない
//		flexWrap: 'wrap',		//これが有るとスクロールしない
		justifyContent: 'space-around',
		gap: 5,
		paddingHorizontal: 5,
		paddingVertical:5,
		width: Dimensions.get('window').width ,
  },
  button: {
    alignItems: 'center',
    backgroundColor: styles.headerButton.backgroundColor,
    justifyContent: 'center',
    paddingHorizontal: 5, 
    width: Dimensions.get('window').width,
    height: 60,
    borderRadius: 10,
    borderColor: styles.buttonBottom.borderColor,
    borderWidth: styles.buttonBottom.borderWidth,
  },
	text: {
    fontSize: 14,
    color: styles.text.color,
  },
});
